_model: page
---
title: Patterns
---
body:

[issues]: https://github.com/frictionlessdata/specs/issues
[repo]: https://github.com/frictionlessdata/specs

## Meta

This document describes various patterns for solving common problems, in ways that are not (yet) specified in any Frictionless Data specification. If we see increased adoption, or wide support, for any pattern, it is a prime candidate for formalising as part of a specification.

## Private properties

### Overview

Some software that implements the Frictionless Data specifications may need to store additional information on the various Frictionless Data descriptors.

For example, a data registry that provides metadata via `datapackage.json` may wish to set an internal version or identifier that is system-specific, and should not be considered as part of the user-generated metadata.

Properties to store such information should be considered "private", and by convention, the names should be prefixed by an underscore `_`.

### Implementations

There are no known implementations at present.

### Specification

On any Frictionless Data descriptor, data that is not generated by the author/contributors, but is generated by software/a system handling the data, `SHOULD` be considered as "private", and be prefixed by an underscore `_`.

To demonstrate, let's take the example of a data registry that implements `datapackage.json` for storing dataset metadata.

A user might upload a `datapackage.json` as follows:

```
{
  "name": "my-package",
  "resources": [
    {
      "name": "my-resource",
      "data": [ "my-resource.csv" ]
    }
  ]
}
```

The registry itself may have a platform-specific version system, and increment versions on each update of the data. To store this information on the datapackage itself, the platform could save this information in a "private" `_platformVersion` property as follows:

```
{
  "name": "my-package",
  "_platformVersion": 7
  "resources": [
    {
      "name": "my-resource",
      "data": [ "my-resource.csv" ]
    }
  ]
}
```

Usage of "private" properties ensures a clear distinction between data stored on the descriptor that is user (author/contributor) defined, and any additional data that may be stored by a 3rd party.

## Caching of resources

### Overview

All Frictionless Data specifications allow for referencing resources via http or a local filesystem.

In the case of remote resources via http, there is always the possibility that the remote server will be unavailable, or, that the resource itself will be temporarily or permanently removed.

Applications that are concerned with the persistent storage of data described in Frictionless Data specifications can use a `_cache` property that mirrors the functionality and usage of the `data` property, and refers to a storage location for the data that the application can fall back to if the canonical resource is unavailable.

### Implementations

There are no known implementations of this pattern at present.

### Specification

Implementations `MAY` handle a `_cache` property on any descriptor that supports a `data` property. In the case that the data referenced in `data` is unavailable, `_cache` should be used as a fallback to access the data. The handling of the data stored at `_cache` is beyond the scope of the specification. Implementations might store a copy of the resources in `data` at ingestion time, update at regular intervals, or any other method to keep an up-to-date, persistent copy.

Some examples of the `_cache` property.

```
{
  "name": "my-package",
  "resources": [
    {
      "name": "my-resource",
      "data": [ "http://example.com/data/csv/my-resource.csv" ],
      "_cache": "my-resource.csv"
    },
    {
      "name": "my-resource",
      "data": [ "http://example.com/data/csv/my-resource.csv" ],
      "_cache": "http://data.registry.com/user/files/my-resource.csv"
    },
    {
      "name": "my-resource",
      "data": [
        "http://example.com/data/csv/my-resource.csv",
        "http://somewhere-else.com/data/csv/resource2.csv"
      ],
      "_cache": [
        "my-resource.csv",
        "resource2.csv"
      ]
    },
    {
      "name": "my-resource",
      "data": [ "http://example.com/data/csv/my-resource.csv" ],
      "_cache": "my-resource.csv"
    }
  ]
}
```

## Language support

### Overview

Language support is a different concern to translation support. Language support deals with declaring the default language of a descriptor and the data it contains in the resources array. Language support makes no claim about the presence of translations when one or more languages are supported in a descriptor or in data. Via the introduction of a `languages` array to any descriptor, we can declare the default language, and any other languages that `SHOULD` be found in the descriptor and the data.

### Implementations

There are no known implementations of this pattern at present.

### Specification

Any Frictionless Data descriptor can declare the language configuration of its metadata and data with the `languages` array.

`languages` `MUST` be an array, and the first item in the array is the default (non-translated) language.

If no `languages` array is present, the default language is English (`en`), and therefore is equivalent to:

```
{
  "name": "my-package",
  "languages": ["en"]
}
```

The presence of a languages array does not ensure that the metadata or the data has translations for all supported languages.

The descriptor and data sources `MUST` be in the default language. The descriptor and data sources `MAY` have translations for the other languages in the array, using the same language code. `IF` a translation is not present, implementing code `MUST` fallback to the default language string.

Example usage of `languages`, implemented in the metadata of a descriptor:

```
{
  "name": "sun-package",
  "languages": ["es", "en"],
  "title": "Sol"
}

# which is equivalent to
{
  "name": "sun-package",
  "languages": ["es", "en"],
  "title": {
    "": "Sol",
    "en": "Sun"
  }
}
```

Example usage of `languages` implemented in the data described by a resource:

```
# resource descriptor
{
  "name": "solar-system",
  "data": [ "solar-system.csv" ]
  "fields": [
    ...
  ],
  "languages": ["es", "en", "he", "fr", "ar"]
}

# data source
# some languages have translations, some do not
# assumes a certain translation pattern, see the related section
id,name,name@fr,name@he,name@en
1,Sol,Soleil,שמש,Sun
2,Luna,Lune,ירח,Moon
```

## Translation support

### Overview

Following on from a general pattern for language support, and the explicit support of metadata translations in Frictionless Data descriptors, it would be desirable to support translations in source data.

We currently have two patterns for this in discussion. Both patterns arise from real-world implementations that are not specifically tied to Frictionless Data.

One pattern suggests inline translations with the source data, reserving the `@` symbol in the naming of fields to denote translations.

The other describes a pattern for storing additional translation sources, co-located with the "source" file described in a descriptor `data`.

### Implementations

There are no known implementations of this pattern in the Frictionless Data core libraries at present.

### Specification

#### Inline

**Uses a column naming convention for accessing translations**.

Tabular resource descriptors support translations using `{field_name}@{lang_code}` syntax for translated field names. `lang_code` `MUST` be present in the `languages` array that applies to the resource.

Any field with the `@` symbol `MUST` be a translation field for another field of data, and `MUST` be parsable according to the `{field_name}@{lang_code}` pattern.

If a translation field is found in the data that does not have a corresponding `field` (e.g.: `title@es` but no `title`), then the translation field `SHOULD` be ignored.

If a translation field is found in the data that uses a `lang_code` *not* declared in the applied `languages` array, then the translation field `SHOULD` be ignored.

Translation fields `MUST NOT` be described in a schema `fields` array.

Translation fields `MUST` match the `type`, `format` and `constraints` of the field they translate, with a single exception: Translation fields are never required, and therefore `constraints.required` is always `false` for a translation field.

#### Co-located translation sources

**Uses a file storage convention for accessing translations**.

To be contributed by @jheeffer

- Has to handle local and remote resources
- Has to be explicit about the translation key/value  pattern in the translation files

```
# local
data/file1.csv
data/lang/file1-en.csv
data/lang/file1-es.csv

# remote
http://example/com/data/file2.csv
http://example/com/data/lang/file2-en.csv
http://example/com/data/lang/file2-es.csv
```

## Table Schema: Foreign Keys to Data Packages

Purpose: allow users to link from the column of a Tabular Data Resource in one Data Package to a Tabular Data Resource in another Data Package.

To support this:

The `foreignKey` MAY have a property `datapackage`. This property is a string being a url pointing to a Data Package or is the name of a datapackage.

## Data Package Version

The Data Package version format follows the [Semantic Versioning](http://semver.org) specification format: MAJOR.MINOR.PATCH

The version numbers, and the way they change, convey meaning how the data package has been modified from one version to the next.

Given a Data Package version number MAJOR.MINOR.PATCH, increment the:

MAJOR version when you make incompatible changes, e.g.

- Change the table schema
- Change field or data package names or data package identifiers
- Add, remove or re-order fields

MINOR version when you add data in a backwards-compatible manner, e.g.

- Add new data to an existing data resource
- Add a new data resource

PATCH version when you make backwards-compatible fixes, e.g.

- Corrections to existing data
- Changes to metadata

### Scenarios

- You are developing your data though public consultation. Start your initial data release at 0.1.0
- You release your data for the first time. Use version 1.0.0
- You append last months data to an existing release. Increment the MINOR version number
- You append a column to the data. Increment the MAJOR version number
- You relocate the data to a new `URL` or `path`. No change in the version number
- You change a `title`, `description`, or other descriptive metadata. Increment the PATCH version
- You fix a data entry error by modifying a value. Increment the PATCH version

## Data Dependencies

Consider a situation where data packages are part of a tool chain that, say, loads all of the data into an SQL db. You can then imagine a situation where one requires package A which requires package B + C.

In this case you want to specify that A depends on B and C -- and that "installing" A should install B and C. This is the purpose of `dataDependencies` property.

### Specification

`dataDependencies` is an object. It follows same format as CommonJS Packages spec v1.1. Each dependency defines the lowest compatible MAJOR[.MINOR[.PATCH]] dependency versions (only one per MAJOR version) with which the package has been tested and is assured to work. The version may be a simple version string (see the version property for acceptable forms), or it may be an object group of dependencies which define a set of options, any one of which satisfies the dependency. The ordering of the group is significant and earlier entries have higher priority. Example:

```javascript
"dataDependencies": {
   "country-codes": "",
   "unemployment": "2.1",
   "geo-boundaries": {
     "acmecorp-geo-boundaries": ["1.0", "2.0"],
     "othercorp-geo-boundaries": "0.9.8",
   },
}
```

### Implementations

None known.
